{
  "version": 3,
  "sources": ["../../ol/layer/TileProperty.js", "../../ol/layer/BaseTile.js", "../../ol/webgl.js", "../../ol/webgl/Buffer.js", "../../ol/webgl/TileTexture.js", "../../ol/webgl/ContextEventType.js", "../../ol/webgl/PostProcessingPass.js", "../../ol/vec/mat4.js", "../../ol/webgl/Helper.js", "../../ol/renderer/webgl/Layer.js", "../../ol/renderer/webgl/TileLayer.js", "../../ol/webgl/PaletteTexture.js", "../../ol/style/expressions.js", "../../ol/layer/WebGLTile.js"],
  "sourcesContent": ["/**\n * @module ol/layer/TileProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\n};\n", "/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source'|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   'change:source'|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true\n    );\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n", "/**\n * @module ol/webgl\n */\n\nimport {SAFARI_BUG_237906} from './has.js';\n\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport const ARRAY_BUFFER = 0x8892;\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STREAM_DRAW = 0x88e0;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STATIC_DRAW = 0x88e4;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const DYNAMIC_DRAW = 0x88e8;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_BYTE = 0x1401;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_SHORT = 0x1403;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_INT = 0x1405;\n\n/**\n * @const\n * @type {number}\n */\nexport const FLOAT = 0x1406;\n\n/** end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [attributes] Attributes.\n * @return {WebGLRenderingContext} WebGL rendering context.\n */\nexport function getContext(canvas, attributes) {\n  attributes = Object.assign(\n    {\n      preserveDrawingBuffer: true,\n      antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n    },\n    attributes\n  );\n  const ii = CONTEXT_IDS.length;\n  for (let i = 0; i < ii; ++i) {\n    try {\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\n      if (context) {\n        return /** @type {!WebGLRenderingContext} */ (context);\n      }\n    } catch (e) {\n      // pass\n    }\n  }\n  return null;\n}\n\n/**\n * @type {Array<string>}\n */\nlet supportedExtensions;\n\n/**\n * @return {Array<string>} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    const canvas = document.createElement('canvas');\n    const gl = getContext(canvas);\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n  return supportedExtensions;\n}\n", "/**\n * @module ol/webgl/Buffer\n */\nimport {\n  ARRAY_BUFFER,\n  DYNAMIC_DRAW,\n  ELEMENT_ARRAY_BUFFER,\n  STATIC_DRAW,\n  STREAM_DRAW,\n} from '../webgl.js';\nimport {assert} from '../asserts.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array}\n     */\n    this.array = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type = type;\n\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   */\n  ofSize(size) {\n    this.array = new (getArrayClassForType(this.type))(size);\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   */\n  fromArray(array) {\n    this.array = getArrayClassForType(this.type).from(array);\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   */\n  fromArrayBuffer(buffer) {\n    this.array = new (getArrayClassForType(this.type))(buffer);\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array} Array.\n   */\n  getArray() {\n    return this.array;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array ? this.array.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\n\nexport default WebGLArrayBuffer;\n", "/**\n * @module ol/webgl/TileTexture\n */\n\nimport DataTile from '../DataTile.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileState from '../TileState.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport {toSize} from '../size.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").Data} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(\n  helper,\n  texture,\n  data,\n  size,\n  bandCount,\n  interpolate\n) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n  switch (bandCount) {\n    case 1: {\n      format = gl.LUMINANCE;\n      break;\n    }\n    case 2: {\n      format = gl.LUMINANCE_ALPHA;\n      break;\n    }\n    case 3: {\n      format = gl.RGB;\n      break;\n    }\n    case 4: {\n      format = gl.RGBA;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\n    }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    size[0],\n    size[1],\n    0,\n    format,\n    textureType,\n    data\n  );\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  const canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @typedef {Object} Options\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\nclass TileTexture extends EventTarget {\n  /**\n   * @param {Options} options The tile texture options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(\n      options.grid.getTileSize(options.tile.tileCoord[0])\n    );\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.gutter_ = options.gutter || 0;\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @private\n     */\n    this.helper_ = options.helper;\n\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([\n      0, // P0\n      1,\n      1, // P1\n      1,\n      1, // P2\n      0,\n      0, // P3\n      0,\n    ]);\n    this.helper_.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.textures.length = 0;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile_();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  uploadTile_() {\n    const helper = this.helper_;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, tile.getImage(), tile.interpolate);\n      return;\n    }\n\n    const sourceTileSize = tile.getSize();\n    const pixelSize = [\n      sourceTileSize[0] + 2 * this.gutter_,\n      sourceTileSize[1] + 2 * this.gutter_,\n    ];\n    const data = tile.getData();\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(\n        helper,\n        texture,\n        data,\n        pixelSize,\n        this.bandCount,\n        tile.interpolate\n      );\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n\n      const bandCount =\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(\n        helper,\n        texture,\n        textureData,\n        pixelSize,\n        bandCount,\n        tile.interpolate\n      );\n    }\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile_();\n      this.dispatchEvent(EventType.CHANGE);\n    }\n  }\n\n  disposeInternal() {\n    const gl = this.helper_.getGL();\n    this.helper_.deleteBuffer(this.coords);\n    for (let i = 0; i < this.textures.length; ++i) {\n      gl.deleteTexture(this.textures[i]);\n    }\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").Data|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n    const gutter = this.gutter_;\n\n    if (this.tile instanceof DataTile) {\n      const sourceSize = this.tile.getSize();\n\n      const sourceWidthWithoutGutter = sourceSize[0];\n      const sourceHeightWithoutGutter = sourceSize[1];\n      const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n      const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n\n      const sourceCol =\n        gutter +\n        Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n      const sourceRow =\n        gutter +\n        Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n      const data = this.tile.getData();\n      if (data instanceof DataView) {\n        const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n        const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n        const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n        return new DataView(buffer);\n      }\n\n      const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n      return data.slice(offset, offset + this.bandCount);\n    }\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    const image = this.tile.getImage();\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n}\n\nexport default TileTexture;\n", "/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored',\n};\n", "/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n\n    this.frameBuffer_ = gl.createFramebuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER\n    );\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW\n    );\n\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position'\n    );\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize'\n    );\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity'\n    );\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image'\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach(\n        function (name) {\n          this.uniforms_.push({\n            value: options.uniforms[name],\n            location: gl.getUniformLocation(this.renderTargetProgram_, name),\n          });\n        }.bind(this)\n      );\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @api\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   * @api\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   * @api\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data)\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3]\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n", "/**\n * @module ol/vec/mat4\n */\n\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}\n", "/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport {\n  FLOAT,\n  UNSIGNED_BYTE,\n  UNSIGNED_INT,\n  UNSIGNED_SHORT,\n  getContext,\n} from '../webgl.js';\nimport {clear} from '../obj.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n  reset as resetTransform,\n  rotate as rotateTransform,\n  scale as scaleTransform,\n} from '../transform.js';\nimport {create, fromTransform} from '../vec/mat4.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\n  OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  SIZE_PX: 'u_sizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT,\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {HTMLCanvasElement} canvas Canvas element.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {HTMLCanvasElement} The canvas.\n */\nfunction getCanvas(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    cacheItem = {users: 0, canvas};\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.canvas;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  const canvas = cacheItem.canvas;\n  const gl = getContext(canvas);\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ =\n      this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\n      : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = getCanvas(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getContext(this.canvas_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n\n    this.canvas_.addEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_\n    );\n    this.canvas_.addEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_\n    );\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, WebGLUniformLocation>}\n     */\n    this.uniformLocations_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.attribLocations_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    const gl = this.getGL();\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses\n      ? options.postProcesses.map(function (options) {\n          return new WebGLPostProcessingPass({\n            webGlContext: gl,\n            scaleRatio: options.scaleRatio,\n            vertexShader: options.vertexShader,\n            fragmentShader: options.fragmentShader,\n            uniforms: options.uniforms,\n          });\n        })\n      : [new WebGLPostProcessingPass({webGlContext: gl})];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name],\n      });\n    }\n    this.uniformLocations_ = {};\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.getGL();\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer,\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.getGL();\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const gl = this.getGL();\n    const bufferKey = getUid(buf);\n    const bufferCacheEntry = this.bufferCache_[bufferKey];\n    if (bufferCacheEntry && !gl.isContextLost()) {\n      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n    }\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.canvas_.removeEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_\n    );\n    this.canvas_.removeEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_\n    );\n\n    releaseCanvas(this.canvasCacheKey_);\n\n    delete this.gl_;\n    delete this.canvas_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   */\n  prepareDraw(frameState, disableAlphaBlend) {\n    const gl = this.getGL();\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   */\n  prepareDrawToRenderTarget(frameState, renderTarget, disableAlphaBlend) {\n    const gl = this.getGL();\n    const size = renderTarget.getSize();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.getGL();\n    this.getExtension('OES_element_index_uint');\n\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          null,\n          preCompose,\n          postCompose\n        );\n      } else {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          this.postProcessPasses_[i + 1]\n        );\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return this.canvas_;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    const offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\n    scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\n\n    const offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\n    if (rotation !== 0) {\n      rotateTransform(offsetRotateMatrix, -rotation);\n    }\n\n    this.setUniformMatrixValue(\n      DefaultUniform.OFFSET_SCALE_MATRIX,\n      fromTransform(this.tmpMat4_, offsetScaleMatrix)\n    );\n    this.setUniformMatrixValue(\n      DefaultUniform.OFFSET_ROTATION_MATRIX,\n      fromTransform(this.tmpMat4_, offsetRotateMatrix)\n    );\n\n    this.setUniformFloatValue(\n      DefaultUniform.TIME,\n      (Date.now() - this.startTime_) * 0.001\n    );\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(\n      DefaultUniform.RESOLUTION,\n      frameState.viewState.resolution\n    );\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.SIZE_PX, [size[0], size[1]]);\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach(\n      function (uniform) {\n        value =\n          typeof uniform.value === 'function'\n            ? uniform.value(frameState)\n            : uniform.value;\n\n        // apply value based on type\n        if (\n          value instanceof HTMLCanvasElement ||\n          value instanceof HTMLImageElement ||\n          value instanceof ImageData\n        ) {\n          // create a texture & put data\n          if (!uniform.texture) {\n            uniform.prevValue = undefined;\n            uniform.texture = gl.createTexture();\n          }\n          gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n          gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n          const imageReady =\n            !(value instanceof HTMLImageElement) ||\n            /** @type {HTMLImageElement} */ (value).complete;\n          if (imageReady && uniform.prevValue !== value) {\n            uniform.prevValue = value;\n            gl.texImage2D(\n              gl.TEXTURE_2D,\n              0,\n              gl.RGBA,\n              gl.RGBA,\n              gl.UNSIGNED_BYTE,\n              value\n            );\n          }\n\n          // fill texture slots by increasing index\n          gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\n        } else if (Array.isArray(value) && value.length === 6) {\n          this.setUniformMatrixValue(\n            uniform.name,\n            fromTransform(this.tmpMat4_, value)\n          );\n        } else if (Array.isArray(value) && value.length <= 4) {\n          switch (value.length) {\n            case 2:\n              gl.uniform2f(\n                this.getUniformLocation(uniform.name),\n                value[0],\n                value[1]\n              );\n              return;\n            case 3:\n              gl.uniform3f(\n                this.getUniformLocation(uniform.name),\n                value[0],\n                value[1],\n                value[2]\n              );\n              return;\n            case 4:\n              gl.uniform4f(\n                this.getUniformLocation(uniform.name),\n                value[0],\n                value[1],\n                value[2],\n                value[3]\n              );\n              return;\n            default:\n              return;\n          }\n        } else if (typeof value === 'number') {\n          gl.uniform1f(this.getUniformLocation(uniform.name), value);\n        }\n      }.bind(this)\n    );\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  useProgram(program, frameState) {\n    const gl = this.getGL();\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    this.uniformLocations_ = {};\n    this.attribLocations_ = {};\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.getGL();\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.getGL();\n\n    const fragmentShader = this.compileShader(\n      fragmentShaderSource,\n      gl.FRAGMENT_SHADER\n    );\n\n    const vertexShader = this.compileShader(\n      vertexShaderSource,\n      gl.VERTEX_SHADER\n    );\n\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compliation failed: ${gl.getShaderInfoLog(\n        fragmentShader\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\n        vertexShader\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getShaderInfoLog(\n        vertexShader\n      )}`;\n      throw new Error(message);\n    }\n\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    if (this.uniformLocations_[name] === undefined) {\n      this.uniformLocations_[name] = this.getGL().getUniformLocation(\n        this.currentProgram_,\n        name\n      );\n    }\n    return this.uniformLocations_[name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    if (this.attribLocations_[name] === undefined) {\n      this.attribLocations_[name] = this.getGL().getAttribLocation(\n        this.currentProgram_,\n        name\n      );\n    }\n    return this.attribLocations_[name];\n  }\n\n  /**\n   * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n\n    resetTransform(transform);\n    composeTransform(\n      transform,\n      0,\n      0,\n      2 / (resolution * size[0]),\n      2 / (resolution * size[1]),\n      -rotation,\n      -center[0],\n      -center[1]\n    );\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.getGL().uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.getGL().uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.getGL().uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.getGL().uniformMatrix4fv(\n      this.getUniformLocation(uniform),\n      false,\n      value\n    );\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.getGL().enableVertexAttribArray(location);\n    this.getGL().vertexAttribPointer(\n      location,\n      size,\n      type,\n      false,\n      stride,\n      offset\n    );\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(\n        attr.name,\n        attr.size,\n        attr.type || FLOAT,\n        stride,\n        offset\n      );\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @private\n   */\n  handleWebGLContextLost() {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {}\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [data] Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture) {\n    const gl = this.getGL();\n    texture = texture || gl.createTexture();\n\n    // set params & size\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        null\n      );\n    }\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;\n", "/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerProperty from '../../layer/Property.js';\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass WebGLLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   * @param {Options} [options] Options.\n   */\n  constructor(layer, options) {\n    super(layer);\n\n    options = options || {};\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n     * set before dispatching rendering events.\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @private\n     */\n    this.postProcesses_ = options.postProcesses;\n\n    /**\n     * @private\n     */\n    this.uniforms_ = options.uniforms;\n\n    /**\n     * @type {WebGLHelper}\n     * @protected\n     */\n    this.helper;\n\n    layer.addChangeListener(LayerProperty.MAP, this.removeHelper.bind(this));\n\n    this.dispatchPreComposeEvent = this.dispatchPreComposeEvent.bind(this);\n    this.dispatchPostComposeEvent = this.dispatchPostComposeEvent.bind(this);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPreComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n      const event = new RenderEvent(\n        RenderEventType.PRECOMPOSE,\n        undefined,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPostComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n      const event = new RenderEvent(\n        RenderEventType.POSTCOMPOSE,\n        undefined,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Reset options (only handles uniforms).\n   * @param {Options} options Options.\n   */\n  reset(options) {\n    this.uniforms_ = options.uniforms;\n    if (this.helper) {\n      this.helper.setUniforms(this.uniforms_);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  removeHelper() {\n    if (this.helper) {\n      this.helper.dispose();\n      delete this.helper;\n    }\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    if (this.getLayer().getRenderSource()) {\n      let incrementGroup = true;\n      let groupNumber = -1;\n      let className;\n      for (let i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n        const layer = frameState.layerStatesArray[i].layer;\n        const renderer = layer.getRenderer();\n        if (!(renderer instanceof WebGLLayerRenderer)) {\n          incrementGroup = true;\n          continue;\n        }\n        const layerClassName = layer.getClassName();\n        if (incrementGroup || layerClassName !== className) {\n          groupNumber += 1;\n          incrementGroup = false;\n        }\n        className = layerClassName;\n        if (renderer === this) {\n          break;\n        }\n      }\n\n      const canvasCacheKey =\n        'map/' + frameState.mapId + '/group/' + groupNumber;\n\n      if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey)) {\n        this.removeHelper();\n\n        this.helper = new WebGLHelper({\n          postProcesses: this.postProcesses_,\n          uniforms: this.uniforms_,\n          canvasCacheKey: canvasCacheKey,\n        });\n\n        if (className) {\n          this.helper.getCanvas().className = className;\n        }\n\n        this.afterHelperCreated();\n      }\n    }\n\n    return this.prepareFrameInternal(frameState);\n  }\n\n  /**\n   * @protected\n   */\n  afterHelperCreated() {}\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @protected\n   */\n  prepareFrameInternal(frameState) {\n    return true;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.removeHelper();\n    super.disposeInternal();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      composeTransform(\n        this.inversePixelTransform_,\n        0,\n        0,\n        frameState.pixelRatio,\n        -frameState.pixelRatio,\n        0,\n        0,\n        -frameState.size[1]\n      );\n\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform_,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n}\n\nexport default WebGLLayerRenderer;\n", "/**\n * @module ol/renderer/webgl/TileLayer\n */\nimport LRUCache from '../../structs/LRUCache.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport TileTexture from '../../webgl/TileTexture.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport {AttributeType} from '../../webgl/Helper.js';\nimport {ELEMENT_ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  reset as resetTransform,\n  rotate as rotateTransform,\n  scale as scaleTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {\n  boundingExtent,\n  containsCoordinate,\n  getIntersection,\n  isEmpty,\n} from '../../extent.js';\nimport {\n  create as createMat4,\n  fromTransform as mat4FromTransform,\n} from '../../vec/mat4.js';\nimport {\n  createOrUpdate as createTileCoord,\n  getKey as getTileCoordKey,\n} from '../../tilecoord.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {numberSafeCompareFunction} from '../../array.js';\nimport {toSize} from '../../size.js';\n\nexport const Uniforms = {\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\n  TILE_TRANSFORM: 'u_tileTransform',\n  TRANSITION_ALPHA: 'u_transitionAlpha',\n  DEPTH: 'u_depth',\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\n  TEXTURE_RESOLUTION: 'u_textureResolution', // map units per texture pixel\n  TEXTURE_ORIGIN_X: 'u_textureOriginX', // map x coordinate of left edge of texture\n  TEXTURE_ORIGIN_Y: 'u_textureOriginY', // map y coordinate of top edge of texture\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\n  RESOLUTION: 'u_resolution',\n  ZOOM: 'u_zoom',\n};\n\nexport const Attributes = {\n  TEXTURE_COORD: 'a_textureCoord',\n};\n\n/**\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n */\nconst attributeDescriptions = [\n  {\n    name: Attributes.TEXTURE_COORD,\n    size: 2,\n    type: AttributeType.FLOAT,\n  },\n];\n\n/**\n * @type {Object<string, boolean>}\n */\nconst empty = {};\n\n/**\n * Transform a zoom level into a depth value ranging from -1 to 1.\n * @param {number} z A zoom level.\n * @return {number} A depth value.\n */\nfunction depthForZ(z) {\n  return 2 * (1 - 1 / (z + 1)) - 1;\n}\n\n/**\n * Add a tile texture to the lookup.\n * @param {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>} tileTexturesByZ Lookup of\n * tile textures by zoom level.\n * @param {import(\"../../webgl/TileTexture.js\").default} tileTexture A tile texture.\n * @param {number} z The zoom level.\n */\nfunction addTileTextureToLookup(tileTexturesByZ, tileTexture, z) {\n  if (!(z in tileTexturesByZ)) {\n    tileTexturesByZ[z] = [];\n  }\n  tileTexturesByZ[z].push(tileTexture);\n}\n\n/**\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */\nfunction getRenderExtent(frameState, extent) {\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\n  if (layerState.extent) {\n    extent = getIntersection(\n      extent,\n      fromUserExtent(layerState.extent, frameState.viewState.projection)\n    );\n  }\n  const source = /** @type {import(\"../../source/Tile.js\").default} */ (\n    layerState.layer.getRenderSource()\n  );\n  if (!source.getWrapX()) {\n    const gridExtent = source\n      .getTileGridForProjection(frameState.viewState.projection)\n      .getExtent();\n    if (gridExtent) {\n      extent = getIntersection(extent, gridExtent);\n    }\n  }\n  return extent;\n}\n\nfunction getCacheKey(source, tileCoord) {\n  return `${source.getKey()},${getTileCoordKey(tileCoord)}`;\n}\n\n/**\n * @typedef {Object} Options\n * @property {string} vertexShader Vertex shader source.\n * @property {string} fragmentShader Fragment shader source.\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\n * @property {number} [cacheSize=512] The texture cache size.\n */\n\n/**\n * @typedef {import(\"../../layer/WebGLTile.js\").default} LayerType\n */\n\n/**\n * @classdesc\n * WebGL renderer for tile layers.\n * @extends {WebGLLayerRenderer<LayerType>}\n * @api\n */\nclass WebGLTileLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, {\n      uniforms: options.uniforms,\n    });\n\n    /**\n     * The last call to `renderFrame` was completed with all tiles loaded\n     * @type {boolean}\n     */\n    this.renderComplete = false;\n\n    /**\n     * This transform converts texture coordinates to screen coordinates.\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.tileTransform_ = createTransform();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.tempMat4_ = createMat4();\n\n    /**\n     * @type {import(\"../../TileRange.js\").default}\n     * @private\n     */\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\n\n    /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\n\n    /**\n     * @type {import(\"../../size.js\").Size}\n     * @private\n     */\n    this.tempSize_ = [0, 0];\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * Tiles are rendered as a quad with the following structure:\n     *\n     *  [P3]---------[P2]\n     *   |`           |\n     *   |  `     B   |\n     *   |    `       |\n     *   |      `     |\n     *   |   A    `   |\n     *   |          ` |\n     *  [P0]---------[P1]\n     *\n     * Triangle A: P0, P1, P3\n     * Triangle B: P1, P2, P3\n     *\n     * @private\n     */\n    this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\n    this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n\n    /**\n     * @type {import(\"../../structs/LRUCache.js\").default<import(\"../../webgl/TileTexture.js\").default>}\n     * @private\n     */\n    this.tileTextureCache_ = new LRUCache(cacheSize);\n\n    /**\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\n     * @private\n     */\n    this.paletteTextures_ = options.paletteTextures || [];\n\n    /**\n     * @private\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.projection_ = undefined;\n  }\n\n  /**\n   * @param {Options} options Options.\n   */\n  reset(options) {\n    super.reset({\n      uniforms: options.uniforms,\n    });\n    this.vertexShader_ = options.vertexShader;\n    this.fragmentShader_ = options.fragmentShader;\n    this.paletteTextures_ = options.paletteTextures || [];\n\n    if (this.helper) {\n      this.program_ = this.helper.getProgram(\n        this.fragmentShader_,\n        this.vertexShader_\n      );\n    }\n  }\n\n  afterHelperCreated() {\n    this.program_ = this.helper.getProgram(\n      this.fragmentShader_,\n      this.vertexShader_\n    );\n\n    this.helper.flushBufferData(this.indices_);\n  }\n\n  /**\n   * @param {import(\"../../webgl/TileTexture\").TileType} tile Tile.\n   * @return {boolean} Tile is drawable.\n   * @private\n   */\n  isDrawableTile_(tile) {\n    const tileLayer = this.getLayer();\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return (\n      tileState == TileState.LOADED ||\n      tileState == TileState.EMPTY ||\n      (tileState == TileState.ERROR && !useInterimTilesOnError)\n    );\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrameInternal(frameState) {\n    if (!this.projection_) {\n      this.projection_ = frameState.viewState.projection;\n    } else if (frameState.viewState.projection !== this.projection_) {\n      this.clearCache();\n      this.projection_ = frameState.viewState.projection;\n    }\n\n    const layer = this.getLayer();\n    const source = layer.getRenderSource();\n    if (!source) {\n      return false;\n    }\n\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\n      return false;\n    }\n    return source.getState() === 'ready';\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} initialZ The zoom level.\n   * @param {Object<number, Array<TileTexture>>} tileTexturesByZ The zoom level.\n   * @param {number} preload Number of additional levels to load.\n   */\n  enqueueTiles(frameState, extent, initialZ, tileTexturesByZ, preload) {\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileTextureCache = this.tileTextureCache_;\n\n    const map = tileLayer.getMapInternal();\n    const minZ = Math.max(\n      initialZ - preload,\n      tileGrid.getMinZoom(),\n      tileGrid.getZForResolution(\n        Math.min(\n          tileLayer.getMaxResolution(),\n          map\n            ? map\n                .getView()\n                .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))\n            : tileGrid.getResolution(0)\n        ),\n        tileSource.zDirection\n      )\n    );\n    for (let z = initialZ; z >= minZ; --z) {\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        extent,\n        z,\n        this.tempTileRange_\n      );\n\n      const tileResolution = tileGrid.getResolution(z);\n\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\n          const cacheKey = getCacheKey(tileSource, tileCoord);\n\n          /** @type {TileTexture} */\n          let tileTexture;\n\n          /** @type {import(\"../../webgl/TileTexture\").TileType} */\n          let tile;\n\n          if (tileTextureCache.containsKey(cacheKey)) {\n            tileTexture = tileTextureCache.get(cacheKey);\n            tile = tileTexture.tile;\n          }\n          if (!tileTexture || tileTexture.tile.key !== tileSource.getKey()) {\n            tile = tileSource.getTile(\n              z,\n              x,\n              y,\n              frameState.pixelRatio,\n              viewState.projection\n            );\n            if (!tileTexture) {\n              tileTexture = new TileTexture({\n                tile: tile,\n                grid: tileGrid,\n                helper: this.helper,\n                gutter: gutter,\n              });\n              tileTextureCache.set(cacheKey, tileTexture);\n            } else {\n              if (this.isDrawableTile_(tile)) {\n                tileTexture.setTile(tile);\n              } else {\n                const interimTile =\n                  /** @type {import(\"../../webgl/TileTexture\").TileType} */ (\n                    tile.getInterimTile()\n                  );\n                tileTexture.setTile(interimTile);\n              }\n            }\n          }\n\n          addTileTextureToLookup(tileTexturesByZ, tileTexture, z);\n\n          const tileQueueKey = tile.getKey();\n          wantedTiles[tileQueueKey] = true;\n\n          if (tile.getState() === TileState.IDLE) {\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n              frameState.tileQueue.enqueue([\n                tile,\n                tileSourceKey,\n                tileGrid.getTileCoordCenter(tileCoord),\n                tileResolution,\n              ]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState) {\n    this.frameState_ = frameState;\n    this.renderComplete = true;\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n    const extent = getRenderExtent(frameState, frameState.extent);\n    const z = tileGrid.getZForResolution(\n      viewState.resolution,\n      tileSource.zDirection\n    );\n\n    /**\n     * @type {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>}\n     */\n    const tileTexturesByZ = {};\n\n    const preload = tileLayer.getPreload();\n    if (frameState.nextExtent) {\n      const targetZ = tileGrid.getZForResolution(\n        viewState.nextResolution,\n        tileSource.zDirection\n      );\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\n      this.enqueueTiles(\n        frameState,\n        nextExtent,\n        targetZ,\n        tileTexturesByZ,\n        preload\n      );\n    }\n\n    this.enqueueTiles(frameState, extent, z, tileTexturesByZ, 0);\n    if (preload > 0) {\n      setTimeout(() => {\n        this.enqueueTiles(\n          frameState,\n          extent,\n          z - 1,\n          tileTexturesByZ,\n          preload - 1\n        );\n      }, 0);\n    }\n\n    /**\n     * A lookup of alpha values for tiles at the target rendering resolution\n     * for tiles that are in transition.  If a tile coord key is absent from\n     * this lookup, the tile should be rendered at alpha 1.\n     * @type {Object<string, number>}\n     */\n    const alphaLookup = {};\n\n    const uid = getUid(this);\n    const time = frameState.time;\n    let blend = false;\n\n    // look for cached tiles to use if a target tile is not ready\n    const tileTextures = tileTexturesByZ[z];\n    for (let i = 0, ii = tileTextures.length; i < ii; ++i) {\n      const tileTexture = tileTextures[i];\n      const tile = tileTexture.tile;\n      if (tile instanceof ReprojTile && tile.getState() === TileState.EMPTY) {\n        continue;\n      }\n      const tileCoord = tile.tileCoord;\n\n      if (tileTexture.loaded) {\n        const alpha = tile.getAlpha(uid, time);\n        if (alpha === 1) {\n          // no need to look for alt tiles\n          tile.endTransition(uid);\n          continue;\n        }\n        blend = true;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        alphaLookup[tileCoordKey] = alpha;\n      }\n      this.renderComplete = false;\n\n      // first look for child tiles (at z + 1)\n      const coveredByChildren = this.findAltTiles_(\n        tileGrid,\n        tileCoord,\n        z + 1,\n        tileTexturesByZ\n      );\n\n      if (coveredByChildren) {\n        continue;\n      }\n\n      // next look for parent tiles\n      const minZoom = tileGrid.getMinZoom();\n      for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\n        const coveredByParent = this.findAltTiles_(\n          tileGrid,\n          tileCoord,\n          parentZ,\n          tileTexturesByZ\n        );\n\n        if (coveredByParent) {\n          break;\n        }\n      }\n    }\n\n    this.helper.useProgram(this.program_, frameState);\n    this.helper.prepareDraw(frameState, !blend);\n\n    const zs = Object.keys(tileTexturesByZ)\n      .map(Number)\n      .sort(numberSafeCompareFunction);\n\n    const centerX = viewState.center[0];\n    const centerY = viewState.center[1];\n\n    for (let j = 0, jj = zs.length; j < jj; ++j) {\n      const tileZ = zs[j];\n      const tileResolution = tileGrid.getResolution(tileZ);\n      const tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\n      const tileOrigin = tileGrid.getOrigin(tileZ);\n\n      const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n      const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n      const aspectRatio = tileWidthWithGutter / tileHeightWithGutter;\n\n      const centerI =\n        (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\n      const centerJ =\n        (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\n\n      const tileScale = viewState.resolution / tileResolution;\n\n      const depth = depthForZ(tileZ);\n      const tileTextures = tileTexturesByZ[tileZ];\n      for (let i = 0, ii = tileTextures.length; i < ii; ++i) {\n        const tileTexture = tileTextures[i];\n        if (!tileTexture.loaded) {\n          continue;\n        }\n        const tile = tileTexture.tile;\n        const tileCoord = tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n\n        const tileCenterI = tileCoord[1];\n        const tileCenterJ = tileCoord[2];\n\n        resetTransform(this.tileTransform_);\n        scaleTransform(\n          this.tileTransform_,\n          2 / ((frameState.size[0] * tileScale) / tileWidthWithGutter),\n          -2 / ((frameState.size[1] * tileScale) / tileWidthWithGutter)\n        );\n        rotateTransform(this.tileTransform_, viewState.rotation);\n        scaleTransform(this.tileTransform_, 1, 1 / aspectRatio);\n        translateTransform(\n          this.tileTransform_,\n          (tileSize[0] * (tileCenterI - centerI) - gutter) /\n            tileWidthWithGutter,\n          (tileSize[1] * (tileCenterJ - centerJ) - gutter) /\n            tileHeightWithGutter\n        );\n\n        this.helper.setUniformMatrixValue(\n          Uniforms.TILE_TRANSFORM,\n          mat4FromTransform(this.tempMat4_, this.tileTransform_)\n        );\n\n        this.helper.bindBuffer(tileTexture.coords);\n        this.helper.bindBuffer(this.indices_);\n        this.helper.enableAttributes(attributeDescriptions);\n\n        let textureSlot = 0;\n        while (textureSlot < tileTexture.textures.length) {\n          const textureProperty = 'TEXTURE' + textureSlot;\n          const uniformName = `${Uniforms.TILE_TEXTURE_ARRAY}[${textureSlot}]`;\n          gl.activeTexture(gl[textureProperty]);\n          gl.bindTexture(gl.TEXTURE_2D, tileTexture.textures[textureSlot]);\n          gl.uniform1i(\n            this.helper.getUniformLocation(uniformName),\n            textureSlot\n          );\n          ++textureSlot;\n        }\n\n        for (\n          let paletteIndex = 0;\n          paletteIndex < this.paletteTextures_.length;\n          ++paletteIndex\n        ) {\n          const paletteTexture = this.paletteTextures_[paletteIndex];\n          gl.activeTexture(gl['TEXTURE' + textureSlot]);\n          const texture = paletteTexture.getTexture(gl);\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          gl.uniform1i(\n            this.helper.getUniformLocation(paletteTexture.name),\n            textureSlot\n          );\n          ++textureSlot;\n        }\n\n        const alpha =\n          tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\n\n        if (alpha < 1) {\n          frameState.animate = true;\n        }\n\n        this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\n        this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n        this.helper.setUniformFloatValue(\n          Uniforms.TEXTURE_PIXEL_WIDTH,\n          tileWidthWithGutter\n        );\n        this.helper.setUniformFloatValue(\n          Uniforms.TEXTURE_PIXEL_HEIGHT,\n          tileHeightWithGutter\n        );\n        this.helper.setUniformFloatValue(\n          Uniforms.TEXTURE_RESOLUTION,\n          tileResolution\n        );\n        this.helper.setUniformFloatValue(\n          Uniforms.TEXTURE_ORIGIN_X,\n          tileOrigin[0] +\n            tileCenterI * tileSize[0] * tileResolution -\n            gutter * tileResolution\n        );\n        this.helper.setUniformFloatValue(\n          Uniforms.TEXTURE_ORIGIN_Y,\n          tileOrigin[1] -\n            tileCenterJ * tileSize[1] * tileResolution +\n            gutter * tileResolution\n        );\n        let gutterExtent = extent;\n        if (gutter > 0) {\n          gutterExtent = tileGrid.getTileCoordExtent(tileCoord);\n          getIntersection(gutterExtent, extent, gutterExtent);\n        }\n        this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, gutterExtent);\n        this.helper.setUniformFloatValue(\n          Uniforms.RESOLUTION,\n          viewState.resolution\n        );\n        this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\n\n        this.helper.drawElements(0, this.indices_.getSize());\n      }\n    }\n\n    this.helper.finalizeDraw(\n      frameState,\n      this.dispatchPreComposeEvent,\n      this.dispatchPostComposeEvent\n    );\n\n    const canvas = this.helper.getCanvas();\n\n    const tileTextureCache = this.tileTextureCache_;\n    while (tileTextureCache.canExpireCache()) {\n      const tileTexture = tileTextureCache.pop();\n      tileTexture.dispose();\n    }\n\n    // TODO: let the renderers manage their own cache instead of managing the source cache\n    /**\n     * Here we unconditionally expire the source cache since the renderer maintains\n     * its own cache.\n     * @param {import(\"../../Map.js\").default} map Map.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     */\n    const postRenderFunction = function (map, frameState) {\n      tileSource.updateCacheSize(0.1, frameState.viewState.projection);\n      tileSource.expireCache(frameState.viewState.projection, empty);\n    };\n\n    frameState.postRenderFunctions.push(postRenderFunction);\n\n    this.postRender(gl, frameState);\n    return canvas;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.\n   */\n  getData(pixel) {\n    const gl = this.helper.getGL();\n    if (!gl) {\n      return null;\n    }\n\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const viewState = frameState.viewState;\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (\n        !containsCoordinate(\n          fromUserExtent(layerExtent, viewState.projection),\n          coordinate\n        )\n      ) {\n        return null;\n      }\n    }\n\n    // determine last source suitable for rendering at coordinate\n    const sources = layer.getSources(\n      boundingExtent([coordinate]),\n      viewState.resolution\n    );\n    let i, source, tileGrid;\n    for (i = sources.length - 1; i >= 0; --i) {\n      source = sources[i];\n      if (source.getState() === 'ready') {\n        tileGrid = source.getTileGridForProjection(viewState.projection);\n        if (source.getWrapX()) {\n          break;\n        }\n        const gridExtent = tileGrid.getExtent();\n        if (!gridExtent || containsCoordinate(gridExtent, coordinate)) {\n          break;\n        }\n      }\n    }\n    if (i < 0) {\n      return null;\n    }\n\n    const tileTextureCache = this.tileTextureCache_;\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const cacheKey = getCacheKey(source, tileCoord);\n      if (!tileTextureCache.containsKey(cacheKey)) {\n        continue;\n      }\n      const tileTexture = tileTextureCache.get(cacheKey);\n      const tile = tileTexture.tile;\n      if (tile instanceof ReprojTile && tile.getState() === TileState.EMPTY) {\n        return null;\n      }\n      if (!tileTexture.loaded) {\n        continue;\n      }\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col =\n        (coordinate[0] - tileOrigin[0]) / tileResolution -\n        tileCoord[1] * tileSize[0];\n\n      const row =\n        (tileOrigin[1] - coordinate[1]) / tileResolution -\n        tileCoord[2] * tileSize[1];\n\n      return tileTexture.getPixelData(col, row);\n    }\n    return null;\n  }\n\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>} tileTexturesByZ Lookup of\n   * tile textures by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n  findAltTiles_(tileGrid, tileCoord, altZ, tileTexturesByZ) {\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(\n      tileCoord,\n      altZ,\n      this.tempTileRange_\n    );\n\n    if (!tileRange) {\n      return false;\n    }\n\n    let covered = true;\n    const tileTextureCache = this.tileTextureCache_;\n    const source = this.getLayer().getRenderSource();\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        const cacheKey = getCacheKey(source, [altZ, x, y]);\n        let loaded = false;\n        if (tileTextureCache.containsKey(cacheKey)) {\n          const tileTexture = tileTextureCache.get(cacheKey);\n          if (tileTexture.loaded) {\n            addTileTextureToLookup(tileTexturesByZ, tileTexture, altZ);\n            loaded = true;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  clearCache() {\n    const tileTextureCache = this.tileTextureCache_;\n    tileTextureCache.forEach((tileTexture) => tileTexture.dispose());\n    tileTextureCache.clear();\n  }\n\n  removeHelper() {\n    if (this.helper) {\n      this.clearCache();\n    }\n\n    super.removeHelper();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    const helper = this.helper;\n    if (helper) {\n      const gl = helper.getGL();\n      gl.deleteProgram(this.program_);\n      delete this.program_;\n\n      helper.deleteBuffer(this.indices_);\n    }\n\n    super.disposeInternal();\n\n    delete this.indices_;\n    delete this.tileTextureCache_;\n    delete this.frameState_;\n  }\n}\n\nexport default WebGLTileLayerRenderer;\n", "/**\n * @module ol/webgl/PaletteTexture\n */\n\nclass PaletteTexture {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  constructor(name, data) {\n    this.name = name;\n    this.data = data;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.texture_ = null;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n  getTexture(gl) {\n    if (!this.texture_) {\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        this.data.length / 4,\n        1,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data\n      );\n      this.texture_ = texture;\n    }\n    return this.texture_;\n  }\n}\n\nexport default PaletteTexture;\n", "/**\n * Operators and utilities used for style expressions\n * @module ol/style/expressions\n */\n\nimport PaletteTexture from '../webgl/PaletteTexture.js';\nimport {Uniforms} from '../renderer/webgl/TileLayer.js';\nimport {asArray, fromString, isStringColor} from '../color.js';\n\n/**\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\n * which in turns takes {@link import(\"./expressions.js\").ExpressionValue} arguments.\n *\n * The following operators can be used:\n *\n * * Reading operators:\n *   * `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\n *     of bands, depending on the underlying data source and\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels.\n *   * `['get', 'attributeName']` fetches a feature attribute (it will be prefixed by `a_` in the shader)\n *     Note: those will be taken from the attributes provided to the renderer\n *   * `['resolution']` returns the current resolution\n *   * `['time']` returns the time in seconds since the creation of the layer\n *   * `['var', 'varName']` fetches a value from the style variables, or 0 if undefined\n *   * `['zoom']` returns the current zoom level\n *\n * * Math operators:\n *   * `['*', value1, value2]` multiplies `value1` by `value2`\n *   * `['/', value1, value2]` divides `value1` by `value2`\n *   * `['+', value1, value2]` adds `value1` and `value2`\n *   * `['-', value1, value2]` subtracts `value2` from `value1`\n *   * `['clamp', value, low, high]` clamps `value` between `low` and `high`\n *   * `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\n *   * `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\n *   * `['abs', value1]` returns the absolute value of `value1`\n *   * `['floor', value1]` returns the nearest integer less than or equal to `value1`\n *   * `['round', value1]` returns the nearest integer to `value1`\n *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`\n *   * `['sin', value1]` returns the sine of `value1`\n *   * `['cos', value1]` returns the cosine of `value1`\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\n *\n * * Transform operators:\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\n *     All conditions should be `boolean`, output and fallback can be any kind.\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\n *     returns the `fallback` value.\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\n *     `fallback` values must be of the same type, and can be of any kind.\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\n *     of 1 is equivalent to `['linear']`.\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\n *     between `output1` and `outputN`.\n *\n * * Logical operators:\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\n *     (inclusively), or `false` otherwise.\n *\n * * Conversion operators:\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\n *     values can currently only be 2, 3 or 4.\n *   * `['color', red, green, blue, alpha]` creates a `color` value from `number` values; the `alpha` parameter is\n *     optional; if not specified, it will be set to 1.\n *     Note: `red`, `green` and `blue` components must be values between 0 and 255; `alpha` between 0 and 1.\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\n *     in the 0-255 range and a in the 0-1 range).\n *\n * Values can either be literals or another operator, as they will be evaluated recursively.\n * Literal values can be of the following types:\n * * `boolean`\n * * `number`\n * * `string`\n * * {@link module:ol/color~Color}\n *\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\n * @api\n */\n\n/**\n * Possible inferred types from a given value or expression.\n * Note: these are binary flags.\n * @enum {number}\n */\nexport const ValueTypes = {\n  NUMBER: 0b00001,\n  STRING: 0b00010,\n  COLOR: 0b00100,\n  BOOLEAN: 0b01000,\n  NUMBER_ARRAY: 0b10000,\n  ANY: 0b11111,\n  NONE: 0,\n};\n\n/**\n * An operator declaration must contain two methods: `getReturnType` which returns a type based on\n * the operator arguments, and `toGlsl` which returns a GLSL-compatible string.\n * Note: both methods can process arguments recursively.\n * @typedef {Object} Operator\n * @property {function(Array<ExpressionValue>): ValueTypes|number} getReturnType Returns one or several types\n * @property {function(ParsingContext, Array<ExpressionValue>, ValueTypes=): string} toGlsl Returns a GLSL-compatible string\n * Note: takes in an optional type hint as 3rd parameter\n */\n\n/**\n * Operator declarations\n * @type {Object<string, Operator>}\n */\nexport const Operators = {};\n\n/**\n * Returns the possible types for a given value (each type being a binary flag)\n * To test a value use e.g. `getValueType(v) & ValueTypes.BOOLEAN`\n * @param {ExpressionValue} value Value\n * @return {ValueTypes|number} Type or types inferred from the value\n */\nexport function getValueType(value) {\n  if (typeof value === 'number') {\n    return ValueTypes.NUMBER;\n  }\n  if (typeof value === 'boolean') {\n    return ValueTypes.BOOLEAN;\n  }\n  if (typeof value === 'string') {\n    if (isStringColor(value)) {\n      return ValueTypes.COLOR | ValueTypes.STRING;\n    }\n    return ValueTypes.STRING;\n  }\n  if (!Array.isArray(value)) {\n    throw new Error(`Unhandled value type: ${JSON.stringify(value)}`);\n  }\n  const valueArr = /** @type {Array<*>} */ (value);\n  const onlyNumbers = valueArr.every(function (v) {\n    return typeof v === 'number';\n  });\n  if (onlyNumbers) {\n    if (valueArr.length === 3 || valueArr.length === 4) {\n      return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;\n    }\n    return ValueTypes.NUMBER_ARRAY;\n  }\n  if (typeof valueArr[0] !== 'string') {\n    throw new Error(\n      `Expected an expression operator but received: ${JSON.stringify(\n        valueArr\n      )}`\n    );\n  }\n  const operator = Operators[valueArr[0]];\n  if (operator === undefined) {\n    throw new Error(\n      `Unrecognized expression operator: ${JSON.stringify(valueArr)}`\n    );\n  }\n  return operator.getReturnType(valueArr.slice(1));\n}\n\n/**\n * Checks if only one value type is enabled in the input number.\n * @param {ValueTypes|number} valueType Number containing value type binary flags\n * @return {boolean} True if only one type flag is enabled, false if zero or multiple\n */\nexport function isTypeUnique(valueType) {\n  return Math.log2(valueType) % 1 === 0;\n}\n\n/**\n * Context available during the parsing of an expression.\n * @typedef {Object} ParsingContext\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\n * @property {Array<string>} variables List of variables used in the expression; contains **unprefixed names**\n * @property {Array<string>} attributes List of attributes used in the expression; contains **unprefixed names**\n * @property {Object<string, number>} stringLiteralsMap This object maps all encountered string values to a number\n * @property {Object<string, string>} functions Lookup of functions used by the style.\n * @property {number} [bandCount] Number of bands per pixel.\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\n */\n\n/**\n * Will return the number as a float with a dot separator, which is required by GLSL.\n * @param {number} v Numerical value.\n * @return {string} The value as string.\n */\nexport function numberToGlsl(v) {\n  const s = v.toString();\n  return s.includes('.') ? s : s + '.0';\n}\n\n/**\n * Will return the number array as a float with a dot separator, concatenated with ', '.\n * @param {Array<number>} array Numerical values array.\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\n */\nexport function arrayToGlsl(array) {\n  if (array.length < 2 || array.length > 4) {\n    throw new Error(\n      '`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.'\n    );\n  }\n  return `vec${array.length}(${array.map(numberToGlsl).join(', ')})`;\n}\n\n/**\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\n * Note that the final array will always have 4 components.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function colorToGlsl(color) {\n  const array = asArray(color).slice();\n  if (array.length < 4) {\n    array.push(1);\n  }\n  return arrayToGlsl(\n    array.map(function (c, i) {\n      return i < 3 ? c / 255 : c;\n    })\n  );\n}\n\n/**\n * Returns a stable equivalent number for the string literal.\n * @param {ParsingContext} context Parsing context\n * @param {string} string String literal value\n * @return {number} Number equivalent\n */\nexport function getStringNumberEquivalent(context, string) {\n  if (context.stringLiteralsMap[string] === undefined) {\n    context.stringLiteralsMap[string] = Object.keys(\n      context.stringLiteralsMap\n    ).length;\n  }\n  return context.stringLiteralsMap[string];\n}\n\n/**\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\n * converted to be a GLSL-compatible string.\n * @param {ParsingContext} context Parsing context\n * @param {string} string String literal value\n * @return {string} GLSL-compatible string containing a number\n */\nexport function stringToGlsl(context, string) {\n  return numberToGlsl(getStringNumberEquivalent(context, string));\n}\n\n/**\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a parsing context that\n * will be read and modified during the parsing operation.\n * @param {ParsingContext} context Parsing context\n * @param {ExpressionValue} value Value\n * @param {ValueTypes|number} [typeHint] Hint for the expected final type (can be several types combined)\n * @return {string} GLSL-compatible output\n */\nexport function expressionToGlsl(context, value, typeHint) {\n  // operator\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    const operator = Operators[value[0]];\n    if (operator === undefined) {\n      throw new Error(\n        `Unrecognized expression operator: ${JSON.stringify(value)}`\n      );\n    }\n    return operator.toGlsl(context, value.slice(1), typeHint);\n  }\n\n  const valueType = getValueType(value);\n  if ((valueType & ValueTypes.NUMBER) > 0) {\n    return numberToGlsl(/** @type {number} */ (value));\n  }\n\n  if ((valueType & ValueTypes.BOOLEAN) > 0) {\n    return value.toString();\n  }\n\n  if (\n    (valueType & ValueTypes.STRING) > 0 &&\n    (typeHint === undefined || typeHint == ValueTypes.STRING)\n  ) {\n    return stringToGlsl(context, value.toString());\n  }\n\n  if (\n    (valueType & ValueTypes.COLOR) > 0 &&\n    (typeHint === undefined || typeHint == ValueTypes.COLOR)\n  ) {\n    return colorToGlsl(/** @type {Array<number> | string} */ (value));\n  }\n\n  if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) {\n    return arrayToGlsl(/** @type {Array<number>} */ (value));\n  }\n\n  throw new Error(`Unexpected expression ${value} (expected type ${typeHint})`);\n}\n\nfunction assertNumber(value) {\n  if (!(getValueType(value) & ValueTypes.NUMBER)) {\n    throw new Error(\n      `A numeric value was expected, got ${JSON.stringify(value)} instead`\n    );\n  }\n}\nfunction assertNumbers(values) {\n  for (let i = 0; i < values.length; i++) {\n    assertNumber(values[i]);\n  }\n}\nfunction assertString(value) {\n  if (!(getValueType(value) & ValueTypes.STRING)) {\n    throw new Error(\n      `A string value was expected, got ${JSON.stringify(value)} instead`\n    );\n  }\n}\nfunction assertBoolean(value) {\n  if (!(getValueType(value) & ValueTypes.BOOLEAN)) {\n    throw new Error(\n      `A boolean value was expected, got ${JSON.stringify(value)} instead`\n    );\n  }\n}\nfunction assertArgsCount(args, count) {\n  if (args.length !== count) {\n    throw new Error(\n      `Exactly ${count} arguments were expected, got ${args.length} instead`\n    );\n  }\n}\nfunction assertArgsMinCount(args, count) {\n  if (args.length < count) {\n    throw new Error(\n      `At least ${count} arguments were expected, got ${args.length} instead`\n    );\n  }\n}\nfunction assertArgsMaxCount(args, count) {\n  if (args.length > count) {\n    throw new Error(\n      `At most ${count} arguments were expected, got ${args.length} instead`\n    );\n  }\n}\nfunction assertArgsEven(args) {\n  if (args.length % 2 !== 0) {\n    throw new Error(\n      `An even amount of arguments was expected, got ${args} instead`\n    );\n  }\n}\nfunction assertArgsOdd(args) {\n  if (args.length % 2 === 0) {\n    throw new Error(\n      `An odd amount of arguments was expected, got ${args} instead`\n    );\n  }\n}\nfunction assertUniqueInferredType(args, types) {\n  if (!isTypeUnique(types)) {\n    throw new Error(\n      `Could not infer only one type from the following expression: ${JSON.stringify(\n        args\n      )}`\n    );\n  }\n}\n\nOperators['get'] = {\n  getReturnType: function (args) {\n    return ValueTypes.ANY;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertString(args[0]);\n    const value = args[0].toString();\n    if (!context.attributes.includes(value)) {\n      context.attributes.push(value);\n    }\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\n    return prefix + value;\n  },\n};\n\n/**\n * Get the uniform name given a variable name.\n * @param {string} variableName The variable name.\n * @return {string} The uniform name.\n */\nexport function uniformNameForVariable(variableName) {\n  return 'u_var_' + variableName;\n}\n\nOperators['var'] = {\n  getReturnType: function (args) {\n    return ValueTypes.ANY;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertString(args[0]);\n    const value = args[0].toString();\n    if (!context.variables.includes(value)) {\n      context.variables.push(value);\n    }\n    return uniformNameForVariable(value);\n  },\n};\n\nexport const PALETTE_TEXTURE_ARRAY = 'u_paletteTextures';\n\n// ['palette', index, colors]\nOperators['palette'] = {\n  getReturnType: function (args) {\n    return ValueTypes.COLOR;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumber(args[0]);\n    const index = expressionToGlsl(context, args[0]);\n    const colors = args[1];\n    if (!Array.isArray(colors)) {\n      throw new Error('The second argument of palette must be an array');\n    }\n    const numColors = colors.length;\n    const palette = new Uint8Array(numColors * 4);\n    for (let i = 0; i < numColors; i++) {\n      const candidate = colors[i];\n      /**\n       * @type {import('../color.js').Color}\n       */\n      let color;\n      if (typeof candidate === 'string') {\n        color = fromString(candidate);\n      } else {\n        if (!Array.isArray(candidate)) {\n          throw new Error(\n            'The second argument of palette must be an array of strings or colors'\n          );\n        }\n        const length = candidate.length;\n        if (length === 4) {\n          color = candidate;\n        } else {\n          if (length !== 3) {\n            throw new Error(\n              `Expected palette color to have 3 or 4 values, got ${length}`\n            );\n          }\n          color = [candidate[0], candidate[1], candidate[2], 1];\n        }\n      }\n      const offset = i * 4;\n      palette[offset] = color[0];\n      palette[offset + 1] = color[1];\n      palette[offset + 2] = color[2];\n      palette[offset + 3] = color[3] * 255;\n    }\n    if (!context.paletteTextures) {\n      context.paletteTextures = [];\n    }\n    const paletteName = `${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}]`;\n    const paletteTexture = new PaletteTexture(paletteName, palette);\n    context.paletteTextures.push(paletteTexture);\n    return `texture2D(${paletteName}, vec2((${index} + 0.5) / ${numColors}.0, 0.5))`;\n  },\n};\n\nconst GET_BAND_VALUE_FUNC = 'getBandValue';\n\nOperators['band'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsMinCount(args, 1);\n    assertArgsMaxCount(args, 3);\n    const band = args[0];\n\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\n      let ifBlocks = '';\n      const bandCount = context.bandCount || 1;\n      for (let i = 0; i < bandCount; i++) {\n        const colorIndex = Math.floor(i / 4);\n        let bandIndex = i % 4;\n        if (i === bandCount - 1 && bandIndex === 1) {\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\n          bandIndex = 3;\n        }\n        const textureName = `${Uniforms.TILE_TEXTURE_ARRAY}[${colorIndex}]`;\n        ifBlocks += `\n          if (band == ${i + 1}.0) {\n            return texture2D(${textureName}, v_textureCoord + vec2(dx, dy))[${bandIndex}];\n          }\n        `;\n      }\n\n      context.functions[GET_BAND_VALUE_FUNC] = `\n        float getBandValue(float band, float xOffset, float yOffset) {\n          float dx = xOffset / ${Uniforms.TEXTURE_PIXEL_WIDTH};\n          float dy = yOffset / ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n          ${ifBlocks}\n        }\n      `;\n    }\n\n    const bandExpression = expressionToGlsl(context, band);\n    const xOffsetExpression = expressionToGlsl(context, args[1] || 0);\n    const yOffsetExpression = expressionToGlsl(context, args[2] || 0);\n    return `${GET_BAND_VALUE_FUNC}(${bandExpression}, ${xOffsetExpression}, ${yOffsetExpression})`;\n  },\n};\n\nOperators['time'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 0);\n    return 'u_time';\n  },\n};\n\nOperators['zoom'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 0);\n    return 'u_zoom';\n  },\n};\n\nOperators['resolution'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 0);\n    return 'u_resolution';\n  },\n};\n\nOperators['*'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `(${expressionToGlsl(context, args[0])} * ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['/'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `(${expressionToGlsl(context, args[0])} / ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['+'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `(${expressionToGlsl(context, args[0])} + ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['-'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `(${expressionToGlsl(context, args[0])} - ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['clamp'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 3);\n    assertNumbers(args);\n    const min = expressionToGlsl(context, args[1]);\n    const max = expressionToGlsl(context, args[2]);\n    return `clamp(${expressionToGlsl(context, args[0])}, ${min}, ${max})`;\n  },\n};\n\nOperators['%'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `mod(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['^'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `pow(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['abs'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return `abs(${expressionToGlsl(context, args[0])})`;\n  },\n};\n\nOperators['floor'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return `floor(${expressionToGlsl(context, args[0])})`;\n  },\n};\n\nOperators['round'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return `floor(${expressionToGlsl(context, args[0])} + 0.5)`;\n  },\n};\n\nOperators['ceil'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return `ceil(${expressionToGlsl(context, args[0])})`;\n  },\n};\n\nOperators['sin'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return `sin(${expressionToGlsl(context, args[0])})`;\n  },\n};\n\nOperators['cos'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return `cos(${expressionToGlsl(context, args[0])})`;\n  },\n};\n\nOperators['atan'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function (context, args) {\n    assertArgsMinCount(args, 1);\n    assertArgsMaxCount(args, 2);\n    assertNumbers(args);\n    return args.length === 2\n      ? `atan(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(\n          context,\n          args[1]\n        )})`\n      : `atan(${expressionToGlsl(context, args[0])})`;\n  },\n};\n\nOperators['>'] = {\n  getReturnType: function (args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `(${expressionToGlsl(context, args[0])} > ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['>='] = {\n  getReturnType: function (args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `(${expressionToGlsl(context, args[0])} >= ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['<'] = {\n  getReturnType: function (args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `(${expressionToGlsl(context, args[0])} < ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nOperators['<='] = {\n  getReturnType: function (args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return `(${expressionToGlsl(context, args[0])} <= ${expressionToGlsl(\n      context,\n      args[1]\n    )})`;\n  },\n};\n\nfunction getEqualOperator(operator) {\n  return {\n    getReturnType: function (args) {\n      return ValueTypes.BOOLEAN;\n    },\n    toGlsl: function (context, args) {\n      assertArgsCount(args, 2);\n\n      // find common type\n      let type = ValueTypes.ANY;\n      for (let i = 0; i < args.length; i++) {\n        type &= getValueType(args[i]);\n      }\n      if (type === ValueTypes.NONE) {\n        throw new Error(\n          `All arguments should be of compatible type, got ${JSON.stringify(\n            args\n          )} instead`\n        );\n      }\n\n      // Since it's not possible to have color types here, we can leave it out\n      // This fixes issues in case the value type is ambiguously detected as a color (e.g. the string 'red')\n      type &= ~ValueTypes.COLOR;\n\n      return `(${expressionToGlsl(\n        context,\n        args[0],\n        type\n      )} ${operator} ${expressionToGlsl(context, args[1], type)})`;\n    },\n  };\n}\n\nOperators['=='] = getEqualOperator('==');\n\nOperators['!='] = getEqualOperator('!=');\n\nOperators['!'] = {\n  getReturnType: function (args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 1);\n    assertBoolean(args[0]);\n    return `(!${expressionToGlsl(context, args[0])})`;\n  },\n};\n\nfunction getDecisionOperator(operator) {\n  return {\n    getReturnType: function (args) {\n      return ValueTypes.BOOLEAN;\n    },\n    toGlsl: function (context, args) {\n      assertArgsMinCount(args, 2);\n      for (let i = 0; i < args.length; i++) {\n        assertBoolean(args[i]);\n      }\n      let result = '';\n      result = args\n        .map((arg) => expressionToGlsl(context, arg))\n        .join(` ${operator} `);\n      result = `(${result})`;\n      return result;\n    },\n  };\n}\n\nOperators['all'] = getDecisionOperator('&&');\n\nOperators['any'] = getDecisionOperator('||');\n\nOperators['between'] = {\n  getReturnType: function (args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function (context, args) {\n    assertArgsCount(args, 3);\n    assertNumbers(args);\n    const min = expressionToGlsl(context, args[1]);\n    const max = expressionToGlsl(context, args[2]);\n    const value = expressionToGlsl(context, args[0]);\n    return `(${value} >= ${min} && ${value} <= ${max})`;\n  },\n};\n\nOperators['array'] = {\n  getReturnType: function (args) {\n    return ValueTypes.NUMBER_ARRAY;\n  },\n  toGlsl: function (context, args) {\n    assertArgsMinCount(args, 2);\n    assertArgsMaxCount(args, 4);\n    assertNumbers(args);\n    const parsedArgs = args.map(function (val) {\n      return expressionToGlsl(context, val, ValueTypes.NUMBER);\n    });\n    return `vec${args.length}(${parsedArgs.join(', ')})`;\n  },\n};\n\nOperators['color'] = {\n  getReturnType: function (args) {\n    return ValueTypes.COLOR;\n  },\n  toGlsl: function (context, args) {\n    assertArgsMinCount(args, 3);\n    assertArgsMaxCount(args, 4);\n    assertNumbers(args);\n    const array = /** @type {Array<number>} */ (args);\n    if (args.length === 3) {\n      array.push(1);\n    }\n    const parsedArgs = args.map(function (val, i) {\n      return (\n        expressionToGlsl(context, val, ValueTypes.NUMBER) +\n        (i < 3 ? ' / 255.0' : '')\n      );\n    });\n    return `vec${args.length}(${parsedArgs.join(', ')})`;\n  },\n};\n\nOperators['interpolate'] = {\n  getReturnType: function (args) {\n    let type = ValueTypes.COLOR | ValueTypes.NUMBER;\n    for (let i = 3; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n    return type;\n  },\n  toGlsl: function (context, args, typeHint) {\n    assertArgsEven(args);\n    assertArgsMinCount(args, 6);\n\n    // validate interpolation type\n    const type = args[0];\n    let interpolation;\n    switch (type[0]) {\n      case 'linear':\n        interpolation = 1;\n        break;\n      case 'exponential':\n        interpolation = type[1];\n        break;\n      default:\n        interpolation = null;\n    }\n    if (!interpolation) {\n      throw new Error(\n        `Invalid interpolation type for \"interpolate\" operator, received: ${JSON.stringify(\n          type\n        )}`\n      );\n    }\n\n    // compute input/output types\n    typeHint = typeHint !== undefined ? typeHint : ValueTypes.ANY;\n    const outputType = Operators['interpolate'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n\n    const input = expressionToGlsl(context, args[1]);\n    const exponent = numberToGlsl(interpolation);\n\n    let result = '';\n    for (let i = 2; i < args.length - 2; i += 2) {\n      const stop1 = expressionToGlsl(context, args[i]);\n      const output1 =\n        result || expressionToGlsl(context, args[i + 1], outputType);\n      const stop2 = expressionToGlsl(context, args[i + 2]);\n      const output2 = expressionToGlsl(context, args[i + 3], outputType);\n      result = `mix(${output1}, ${output2}, pow(clamp((${input} - ${stop1}) / (${stop2} - ${stop1}), 0.0, 1.0), ${exponent}))`;\n    }\n    return result;\n  },\n};\n\nOperators['match'] = {\n  getReturnType: function (args) {\n    let type = ValueTypes.ANY;\n    for (let i = 2; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n    type = type & getValueType(args[args.length - 1]);\n    return type;\n  },\n  toGlsl: function (context, args, typeHint) {\n    assertArgsEven(args);\n    assertArgsMinCount(args, 4);\n\n    typeHint = typeHint !== undefined ? typeHint : ValueTypes.ANY;\n    const outputType = Operators['match'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n\n    const input = expressionToGlsl(context, args[0]);\n    const fallback = expressionToGlsl(\n      context,\n      args[args.length - 1],\n      outputType\n    );\n    let result = null;\n    for (let i = args.length - 3; i >= 1; i -= 2) {\n      const match = expressionToGlsl(context, args[i]);\n      const output = expressionToGlsl(context, args[i + 1], outputType);\n      result = `(${input} == ${match} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  },\n};\n\nOperators['case'] = {\n  getReturnType: function (args) {\n    let type = ValueTypes.ANY;\n    for (let i = 1; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n    type = type & getValueType(args[args.length - 1]);\n    return type;\n  },\n  toGlsl: function (context, args, typeHint) {\n    assertArgsOdd(args);\n    assertArgsMinCount(args, 3);\n\n    typeHint = typeHint !== undefined ? typeHint : ValueTypes.ANY;\n    const outputType = Operators['case'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n    for (let i = 0; i < args.length - 1; i += 2) {\n      assertBoolean(args[i]);\n    }\n\n    const fallback = expressionToGlsl(\n      context,\n      args[args.length - 1],\n      outputType\n    );\n    let result = null;\n    for (let i = args.length - 3; i >= 0; i -= 2) {\n      const condition = expressionToGlsl(context, args[i]);\n      const output = expressionToGlsl(context, args[i + 1], outputType);\n      result = `(${condition} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  },\n};\n", "/**\n * @module ol/layer/WebGLTile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport LayerProperty from '../layer/Property.js';\nimport WebGLTileLayerRenderer, {\n  Attributes,\n  Uniforms,\n} from '../renderer/webgl/TileLayer.js';\nimport {\n  PALETTE_TEXTURE_ARRAY,\n  ValueTypes,\n  expressionToGlsl,\n  getStringNumberEquivalent,\n  uniformNameForVariable,\n} from '../style/expressions.js';\n\n/**\n * @typedef {import(\"../source/DataTile.js\").default|import(\"../source/TileImage.js\").default} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../style/expressions.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\nfunction parseStyle(style, bandCount) {\n  const vertexShader = `\n    attribute vec2 ${Attributes.TEXTURE_COORD};\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\n    uniform float ${Uniforms.DEPTH};\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n\n    void main() {\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\n      v_mapCoord = vec2(\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\n      );\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\n    }\n  `;\n\n  /**\n   * @type {import(\"../style/expressions.js\").ParsingContext}\n   */\n  const context = {\n    inFragmentShader: true,\n    variables: [],\n    attributes: [],\n    stringLiteralsMap: {},\n    functions: {},\n    bandCount: bandCount,\n  };\n\n  const pipeline = [];\n\n  if (style.color !== undefined) {\n    const color = expressionToGlsl(context, style.color, ValueTypes.COLOR);\n    pipeline.push(`color = ${color};`);\n  }\n\n  if (style.contrast !== undefined) {\n    const contrast = expressionToGlsl(\n      context,\n      style.contrast,\n      ValueTypes.NUMBER\n    );\n    pipeline.push(\n      `color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\n    );\n  }\n\n  if (style.exposure !== undefined) {\n    const exposure = expressionToGlsl(\n      context,\n      style.exposure,\n      ValueTypes.NUMBER\n    );\n    pipeline.push(\n      `color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\n    );\n  }\n\n  if (style.saturation !== undefined) {\n    const saturation = expressionToGlsl(\n      context,\n      style.saturation,\n      ValueTypes.NUMBER\n    );\n    pipeline.push(`\n      float saturation = ${saturation} + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    `);\n  }\n\n  if (style.gamma !== undefined) {\n    const gamma = expressionToGlsl(context, style.gamma, ValueTypes.NUMBER);\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\n  }\n\n  if (style.brightness !== undefined) {\n    const brightness = expressionToGlsl(\n      context,\n      style.brightness,\n      ValueTypes.NUMBER\n    );\n    pipeline.push(\n      `color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\n    );\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n\n  const numVariables = context.variables.length;\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(\n      `Missing variables in style (expected ${context.variables})`\n    );\n  }\n\n  for (let i = 0; i < numVariables; ++i) {\n    const variableName = context.variables[i];\n    if (!(variableName in style.variables)) {\n      throw new Error(`Missing '${variableName}' in style variables`);\n    }\n    const uniformName = uniformNameForVariable(variableName);\n    uniforms[uniformName] = function () {\n      let value = style.variables[variableName];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(context, value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  }\n\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return `uniform float ${name};`;\n  });\n\n  const textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(\n    `uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`\n  );\n\n  if (context.paletteTextures) {\n    uniformDeclarations.push(\n      `uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`\n    );\n  }\n\n  const functionDefintions = Object.keys(context.functions).map(function (\n    name\n  ) {\n    return context.functions[name];\n  });\n\n  const fragmentShader = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\n    uniform float ${Uniforms.TRANSITION_ALPHA};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.RESOLUTION};\n    uniform float ${Uniforms.ZOOM};\n\n    ${uniformDeclarations.join('\\n')}\n\n    ${functionDefintions.join('\\n')}\n\n    void main() {\n      if (\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\n      ) {\n        discard;\n      }\n\n      vec4 color = texture2D(${\n        Uniforms.TILE_TEXTURE_ARRAY\n      }[0],  v_textureCoord);\n\n      ${pipeline.join('\\n')}\n\n      if (color.a == 0.0) {\n        discard;\n      }\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\n    }`;\n\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures,\n  };\n}\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass WebGLTileLayer extends BaseTileLayer {\n  /**\n   * @param {Options} options Tile layer options.\n   */\n  constructor(options) {\n    options = options ? Object.assign({}, options) : {};\n\n    const style = options.style || {};\n    delete options.style;\n\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n\n    super(options);\n\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n    this.sources_ = options.sources;\n\n    /**\n     * @type {SourceType|null}\n     * @private\n     */\n    this.renderedSource_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.style_ = style;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = this.style_.variables || {};\n\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\n  }\n\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n  getSources(extent, resolution) {\n    const source = this.getSource();\n    return this.sources_\n      ? typeof this.sources_ === 'function'\n        ? this.sources_(extent, resolution)\n        : this.sources_\n      : source\n      ? [source]\n      : [];\n  }\n\n  /**\n   * @return {SourceType} The source being rendered.\n   */\n  getRenderSource() {\n    return this.renderedSource_ || this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getRenderSource();\n    return source ? source.getState() : 'undefined';\n  }\n\n  /**\n   * @private\n   */\n  handleSourceUpdate_() {\n    if (this.hasRenderer()) {\n      this.getRenderer().clearCache();\n    }\n    if (this.getSource()) {\n      this.setStyle(this.style_);\n    }\n  }\n\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n  getSourceBandCount_() {\n    const max = Number.MAX_SAFE_INTEGER;\n    const sources = this.getSources([-max, -max, max, max], max);\n    return sources && sources.length && 'bandCount' in sources[0]\n      ? sources[0].bandCount\n      : 4;\n  }\n\n  createRenderer() {\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.cacheSize_,\n      paletteTextures: parsedStyle.paletteTextures,\n    });\n  }\n\n  /**\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\n   * @param {Array<SourceType>} sources Sources.\n   * @return {HTMLElement} Canvas.\n   */\n  renderSources(frameState, sources) {\n    const layerRenderer = this.getRenderer();\n    let canvas;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      this.renderedSource_ = sources[i];\n      if (layerRenderer.prepareFrame(frameState)) {\n        canvas = layerRenderer.renderFrame(frameState);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    this.rendered = true;\n    const viewState = frameState.viewState;\n    const sources = this.getSources(frameState.extent, viewState.resolution);\n    let ready = true;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      const source = sources[i];\n      const sourceState = source.getState();\n      if (sourceState == 'loading') {\n        const onChange = () => {\n          if (source.getState() == 'ready') {\n            source.removeEventListener('change', onChange);\n            this.changed();\n          }\n        };\n        source.addEventListener('change', onChange);\n      }\n      ready = ready && sourceState == 'ready';\n    }\n    const canvas = this.renderSources(frameState, sources);\n    if (this.getRenderer().renderComplete && ready) {\n      // Fully rendered, done.\n      this.renderedResolution_ = viewState.resolution;\n      return canvas;\n    }\n    // Render sources from previously fully rendered frames\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n      const altSources = this.getSources(\n        frameState.extent,\n        this.renderedResolution_\n      ).filter((source) => !sources.includes(source));\n      if (altSources.length > 0) {\n        return this.renderSources(frameState, altSources);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.  Note that calling this method will also replace\n   * any previously set variables, so the new style also needs to include new variables,\n   * if needed.\n   * @param {Style} style The new style.\n   */\n  setStyle(style) {\n    this.styleVariables_ = style.variables || {};\n    this.style_ = style;\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    const renderer = this.getRenderer();\n    renderer.reset({\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      paletteTextures: parsedStyle.paletteTextures,\n    });\n    this.changed();\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\nWebGLTileLayer.prototype.dispose;\n\nexport default WebGLTileLayer;\n"],
  "mappings": "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",
  "names": ["sourceWidthWithoutGutter", "sourceHeightWithoutGutter", "sourceWidth", "sourceHeight", "sourceCol", "sourceRow", "data", "offset", "create", "create", "options", "Layer_default", "EventType_default", "Layer_default", "create", "tileTextures", "frameState"]
}
